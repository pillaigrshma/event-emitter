// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: events/events.proto

package events

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsClient interface {
	DeliverMPTEvent(ctx context.Context, opts ...grpc.CallOption) (Events_DeliverMPTEventClient, error)
}

type eventsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsClient(cc grpc.ClientConnInterface) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) DeliverMPTEvent(ctx context.Context, opts ...grpc.CallOption) (Events_DeliverMPTEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &Events_ServiceDesc.Streams[0], "/events.Events/deliverMPTEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsDeliverMPTEventClient{stream}
	return x, nil
}

type Events_DeliverMPTEventClient interface {
	Send(*MPTEventRequest) error
	Recv() (*MPTEventResponse, error)
	grpc.ClientStream
}

type eventsDeliverMPTEventClient struct {
	grpc.ClientStream
}

func (x *eventsDeliverMPTEventClient) Send(m *MPTEventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventsDeliverMPTEventClient) Recv() (*MPTEventResponse, error) {
	m := new(MPTEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventsServer is the server API for Events service.
// All implementations must embed UnimplementedEventsServer
// for forward compatibility
type EventsServer interface {
	DeliverMPTEvent(Events_DeliverMPTEventServer) error
	mustEmbedUnimplementedEventsServer()
}

// UnimplementedEventsServer must be embedded to have forward compatible implementations.
type UnimplementedEventsServer struct {
}

func (UnimplementedEventsServer) DeliverMPTEvent(Events_DeliverMPTEventServer) error {
	return status.Errorf(codes.Unimplemented, "method DeliverMPTEvent not implemented")
}
func (UnimplementedEventsServer) mustEmbedUnimplementedEventsServer() {}

// UnsafeEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServer will
// result in compilation errors.
type UnsafeEventsServer interface {
	mustEmbedUnimplementedEventsServer()
}

func RegisterEventsServer(s grpc.ServiceRegistrar, srv EventsServer) {
	s.RegisterService(&Events_ServiceDesc, srv)
}

func _Events_DeliverMPTEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventsServer).DeliverMPTEvent(&eventsDeliverMPTEventServer{stream})
}

type Events_DeliverMPTEventServer interface {
	Send(*MPTEventResponse) error
	Recv() (*MPTEventRequest, error)
	grpc.ServerStream
}

type eventsDeliverMPTEventServer struct {
	grpc.ServerStream
}

func (x *eventsDeliverMPTEventServer) Send(m *MPTEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventsDeliverMPTEventServer) Recv() (*MPTEventRequest, error) {
	m := new(MPTEventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Events_ServiceDesc is the grpc.ServiceDesc for Events service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Events_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "events.Events",
	HandlerType: (*EventsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "deliverMPTEvent",
			Handler:       _Events_DeliverMPTEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "events/events.proto",
}
